name: Destroy Converged AWS Instances

on: workflow_dispatch

jobs:
  Setup-Terraform:
    runs-on: self-hosted
    steps:
      - name: Terraform Installed?
        continue-on-error: true
        id: check-terraform
        run: terraform -v
        
      - name: Installing ChefWorkstation v21.2.278
        if: steps.check-terraform.outcome == 'failure'
        run: |
          sudo yum install -y wget unzip
          sudo yum install -y yum-utils
          sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
          sudo yum install -y terraform
          terraform -v

  Setup-ChefWorkstation:
    runs-on: self-hosted
    steps:
      - name: Chef Installed?
        continue-on-error: true
        id: check-chef
        run: chef -v
        
      - name: Installing ChefWorkstation v21.2.278
        if: steps.check-chef.outcome == 'failure'
        run: |
          wget https://packages.chef.io/files/stable/chef-workstation/21.2.278/el/8/chef-workstation-21.2.278-1.el7.x86_64.rpm
          sudo rpm -ivh chef-workstation-21.2.278-1.el7.x86_64.rpm
          rm chef-workstation-21.2.278-1.el7.x86_64.rpm
          chef -v
          
  Terraform-Destroy:
    runs-on: self-hosted
    needs: [ Setup-Terraform, Setup-ChefWorkstation ]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Destroying up AWS Instances
        run: |
          terraform init
          terraform destroy -auto-approve

      - name: Cleaning up node/client on Chef ChefServer
        run: |
          knife node list -c .chef/config.rb | grep "aws" | xargs knife node delete -y -c .chef/config.rb || echo "node deletion failed somehow"
          knife client list -c .chef/config.rb | grep "aws" | xargs knife client delete -y -c .chef/config.rb || echo "client delete failed somehow"
          
          
#   Inspec-Test:
#     runs-on: self-hosted
#     needs: Terraform-Apply
#     continue-on-error: true
#     steps:

#       - name: Running InSpec 正常性テスト (基本テスト)
#         continue-on-error: true
#         id: inspec-check-0
#         run: for i in `knife search 'policy_group:aws' -i -c .chef/config.rb | sort`; do inspec exec test/default_test.rb --sudo --target ssh://ec2-user@$i -i /home/r-goto/r-goto_aws-osaka.pem || echo "::set-output name=INSPEC-RESULT::機能不具合の検知"; done      

#       - name: Running InSpec 正常性テスト (WEBサーバ機能テスト)
#         continue-on-error: true
#         id: inspec-check-1
#         run: for i in `knife search 'policy_group:aws AND policy_name:web-server ' -a cloud.public_ipv4_addrs -i -c .chef/config.rb | sort`; do inspec exec test/setup_nginx_test.rb --sudo --target ssh://ec2-user@$i -i /home/r-goto/r-goto_aws-osaka.pem || echo "::set-output name=INSPEC-RESULT::機能不具合の検知"; done

#       - name: Running InSpec 正常性テスト (DBサーバ機能テスト)
#         continue-on-error: true
#         id: inspec-check-last
#         if: steps.inspec-check-1.outcome == 'success'
#         run: for i in `knife search 'policy_group:aws AND policy_name:db-server' -a cloud.public_ipv4_addrs -i -c .chef/config.rb | sort`; do inspec exec test/setup_postgresql_test.rb --sudo --target ssh://ec2-user@$i -i /home/r-goto/r-goto_aws-osaka.pem || echo "::set-output name=INSPEC-RESULT::機能不具合の検知"; done

#       - name: 不具合通知 (slack)
#         continue-on-error: true
#         if: contains ( steps.inspec-check-0.outputs.INSPEC-RESULT, '機能不具合の検知' ) || contains ( steps.inspec-check-1.outputs.INSPEC-RESULT, '機能不具合の検知' )　|| contains ( steps.inspec-check-last.outputs.INSPEC-RESULT, '機能不具合の検知' )
#         uses: tokorom/action-slack-incoming-webhook@main
#         env:
#           INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#         with:
#           text: "※※※※※機能不具合 検知※※※※※"

#       - name: InSpec 正常性テスト結果
#         if: contains ( steps.inspec-check-0.outputs.INSPEC-RESULT, '機能不具合の検知' ) || contains ( steps.inspec-check-1.outputs.INSPEC-RESULT, '機能不具合の検知' )　|| contains ( steps.inspec-check-last.outputs.INSPEC-RESULT, '機能不具合の検知' )
#         run: echo "※※※※※機能不具合 検知※※※※※" && exit 1

#   Secuity-Check:
#     runs-on: self-hosted
#     needs: Inspec-Test
#     steps:
#       - name: Running InSpec セキュリティテスト
#         id: security-check
#         continue-on-error: true
#         run: for i in `knife search 'policy_group:aws' -a cloud.public_ipv4_addrs -i -c .chef/config.rb | sort`; do inspec exec --sudo test/ssh_security_test.rb --target ssh://ec2-user@$i -i /home/r-goto/r-goto_aws-osaka.pem || echo "::set-output name=INSPEC_RESULT::重大なセキュリティ問題の検知"; done
        
#       - name: 不具合通知 (slack)
#         continue-on-error: true
#         if: contains ( steps.security-check.outputs.INSPEC_RESULT, '重大なセキュリティ問題' )
#         uses: tokorom/action-slack-incoming-webhook@main
#         env:
#           INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#         with:
#           text: "!!!!【AWS環境】インスタンスに重大なセキュリティ問題 検知!!!!"

#       - name: InSpec セキュリティテスト結果
#         if: contains ( steps.security-check.outputs.INSPEC_RESULT, '重大なセキュリティ問題' )
#         run: echo "!!!!【AWS環境】インスタンスに重大なセキュリティ問題 検知!!!" && exit 1
